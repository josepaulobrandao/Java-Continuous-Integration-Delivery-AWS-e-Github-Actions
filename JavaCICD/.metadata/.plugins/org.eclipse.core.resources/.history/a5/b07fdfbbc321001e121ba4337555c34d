package io.github.josepauloteste.math;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

@DisplayName("Test Math Operations in SimpleMath Class")
class SimpleMathTest {
	SimpleMath math;

	@BeforeAll
	static void setUp() {
		System.out.println("1-Inicio - Running @BeforeAll method! ");
	}

	@AfterAll
	static void cleanUp() {
		System.out.println("4-Fim - Running @AfterAll method! ");
	}

	@BeforeEach
	void beforEachMethod() {
		math = new SimpleMath();
		System.out.println("2-Inicio - Running @BeforeEach method! ");
	}

	@AfterEach
	void aflterEachMethod() {
		System.out.println("3-Fim - Running @AfterEach method! ");
	}

	// test[System Under Test]_[Condition or State Change]_[Expected Result]
	@Test
	@DisplayName("Test 6.2 + 2 = 8.2")
	void testSum_When_SixDotTwoIsAddedByTwo_ShouldReturnEightDotTwo() {

		System.out.println("Test 6.2 + 2 = 8.2 ");

		// AAA = Arrange, Act , Assert
		// Given - Arrange
		double firstNumber = 6.2D;
		double secondNumber = 2D;
		double expected = 8.2D;

		// When - Act
		Double actual = math.sum(firstNumber, secondNumber);

		// Then - Assert
		assertEquals(expected, actual, () -> firstNumber + "+" + secondNumber + " did not produce " + expected + "!");
	}

	@Test
	@DisplayName("Test 6.2 - 2 = 4.2")
	void testSubtraction() {

		System.out.println("Test 6.2 - 2 = 4.2");

		double firstNumber = 6.2D;
		double secondNumber = 2D;

		Double actual = math.subtraction(firstNumber, secondNumber);
		double expected = 4.2D;

		assertEquals(expected, actual, () -> firstNumber + "-" + secondNumber + " did not produce " + expected + "!");
	}

	@Test
	@DisplayName("Test 6.2 * 2 = 12.4")
	void testMultiplication() {

		System.out.println("Test 6.2 * 2 = 12.4 ");

		double firstNumber = 6.2D;
		double secondNumber = 2D;

		Double actual = math.multiplication(firstNumber, secondNumber);
		double expected = 12.4D;

		assertEquals(expected, actual, () -> firstNumber + "*" + secondNumber + " did not produce " + expected + "!");
	}

	@Test
	@DisplayName("Test 6.2 / 2 = 3.1")
	void testDivision() {

		System.out.println("Test 6.2 / 2 = 3.1 ");

		double firstNumber = 6.2D;
		double secondNumber = 2D;

		Double actual = math.division(firstNumber, secondNumber);
		double expected = 3.1D;

		assertEquals(expected, actual, () -> firstNumber + "/" + secondNumber + " did not produce " + expected + "!");
	}

	// test[System Under Test]_[Condition or State Change]_[Expected Result]
	//@Disabled("TODO: We need still work on it!")
	@Test
	@DisplayName("Test Division by Zero")
	void testDivision_When_FirstNumberIsDividedByZero_ShouldThrowArithmeticException() {
		double firstNumber = 6.2D;
		double secondNumber = 2D;
		//when && then
		var expectedMessage = "Impossible to divide by zero!";
		//when && then
		ArithmeticException actual = assertThrows(ArithmeticException.class, () -> {
		math.division(firstNumber, secondNumber);
		}, () -> "Division By zero should thorw an ArithmeticException");
		
		assertEquals(expectedMessage, actual.getMessage(), () -> "Unexpected exception message");
		fail();
	}

	@Test
	@DisplayName("Test (6.2 + 2) / 2 = 4.1")
	void testMean() {

		System.out.println("Test (6.2 + 2) / 2 = 4.1 ");

		double firstNumber = 6.2D;
		double secondNumber = 2D;

		Double actual = math.mean(firstNumber, secondNumber);
		double expected = 4.1D;

		assertEquals(expected, actual,
				() -> "(" + firstNumber + "+" + secondNumber + ")/2" + " did not produce " + expected + "!");
	}

	@Test
	@DisplayName("Test Square Root of 81 = 9")
	void testSquareRoot() {

		System.out.println("Test Square Root of 81 = 9");

		double number = 81D;
		double expected = 9D;

		Double actual = math.squareRoot(number);

		assertEquals(expected, actual, () -> "Square Root of " + number + " did not produce " + expected + "!");
	}

	// test[System Under Test]_[Condition or State Change]_[Expected Result]
	@Test
	@DisplayName("teste BDD")
	void testABCD_When_XYZ_Should() {
		// Given - Arrange
		// When - Act
		// Then - Assert
	}
}