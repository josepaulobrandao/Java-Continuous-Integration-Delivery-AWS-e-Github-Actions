package io.github.josepaulo.mockito.business;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.mockito.BDDMockito.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import java.util.Arrays;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import io.github.josepaulo.mockito.service.CourseService;
import io.github.josepaulo.mockito.stub.CourseServiceStubTest;

class CourseBusinessMockWhitBDDTest {
	  CourseBusiness business;
	  CourseService mockService;
	  List<String> courses;

	@BeforeEach
	void setUp() {
		// Given / Arrange
		mockService = mock(CourseService.class);
		business = new CourseBusiness(mockService);
		courses = Arrays.asList("REST API's RESTFul do 0 à Azure com ASP.NET Core 5 e Docker",
								"Agile Desmistificado com Scrum, XP, Kanban e Trello", "Spotify Engineering Culture Desmistificado",
								"REST API's RESTFul do 0 à AWS com Spring Boot 3 Java e Docker",
								"Docker do Zero à Maestria - Contêinerização Desmistificada",
								"Docker para Amazon AWS Implante Apps Java e .NET com Travis CI",
								"Microsserviços do 0 com Spring Cloud, Spring Boot e Docker",
								"Arquitetura de Microsserviços do 0 com ASP.NET, .NET 6 e C#",
								"REST API's RESTFul do 0 à AWS com Spring Boot 3 Kotlin e Docker",
								"Kotlin para DEV's Java: Aprenda a Linguagem Padrão do Android",
								"Microsserviços do 0 com Spring Cloud, Kotlin e Docker");
	}

	@Test
    void testCoursesRelatedToSpring_When_UsingAStub() {
    	// Given / Arrange
  
    	given(mockService.retrieveCourses("Leandro")).willReturn(courses);
        
        // When / Act
        var filteredCourses = business.retriveCoursesRelatedToSpring("Leandro");
        
        // Then / Assert
        assertThat(4, filteredCourses.size());
    }

	@Test
	void testCoursesRelatedToSpring_When_UsingAFooBarStudent() {

		// Given / Arrange
		CourseService stubService = new CourseServiceStubTest();
		CourseBusiness business = new CourseBusiness(stubService);

		// When / Act
		var filteredCourses = business.retriveCoursesRelatedToSpring("Foo Bar");

		// Then / Assert
		assertEquals(0, filteredCourses.size());
	}

}
