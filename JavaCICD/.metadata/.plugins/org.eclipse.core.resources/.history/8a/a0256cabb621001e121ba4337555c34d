package io.github.josepauloteste.math;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

@DisplayName("Test Math Operations in SimpleMathClass")
class SimpleMathTest {

	//PadrÃ£o nomenclatura teste java
	//test[System Under test]_[Condition or State Change_[Expected Result]
	
    @Test
    @DisplayName("Test 6.2 + 2 = 8.2")
    void testSum_When_SixDotTwoIsAddedByTwo_ShouldRetorunEightDotTwo() {
        SimpleMath math = new SimpleMath();
        Double firstNumber = 6.2D;
        Double secondNumber = 2D;
        Double actual = math.sum(firstNumber, secondNumber);
        double expected = 8.2D;
        
        assertEquals(expected, actual, () ->  firstNumber + secondNumber + "did not produce expected result " + expected);
        assertNotEquals(9.2,actual);
        assertNotNull(actual);

        
        
    }
    
    @Test
    @DisplayName("Test 6.2D + 2D = 4.2")
    void testeSubtraction() {
    	SimpleMath math = new SimpleMath();
        Double firstNumber = 6.2D;
        Double secondNumber = 2D;
        Double actual = math.subtraction(firstNumber, secondNumber);
        double expected = 4.2D;
        
        assertEquals(expected, actual, () ->  firstNumber - secondNumber + "did not produce expected result " + expected);
        assertNotEquals(9.2,actual);
        assertNotNull(actual);
        
    }
    
    @Test
    @DisplayName("Test 6.2 + 2 = 8.2")
    void testDivision_When_FirstNumberIsDividedByZero_ShouldThorwArithimetcException() {
    	SimpleMath math = new SimpleMath();
    	Double firstNumber = 6.2D;
    	Double secondNumber = 2D;
    	Double actual = math.division(firstNumber, secondNumber);
    	double expected = 3.1D;
    	
    	assertEquals(expected, actual, () ->  firstNumber / secondNumber + "did not produce expected result " + expected);
    	assertNotEquals(9.2,actual);
    	assertNotNull(actual);
    	
    }
    
    @Test
    @DisplayName("Test 6.2 + 2 = 8.2")
    void testeMultiplicacao() {
    	SimpleMath math = new SimpleMath();
    	Double firstNumber = 6.2D;
    	Double secondNumber = 2D;
    	Double actual = math.multiplication(firstNumber, secondNumber);
    	double expected = 8.2D;
    	
    	assertEquals(expected, actual, () ->  firstNumber * secondNumber + "did not produce expected result " + expected);
    	assertNotEquals(9.2,actual);
    	assertNotNull(actual);
    	
    }
    
    @Test
    @DisplayName("Test 6.2 + 2 = 8.2")
    void testeMean() {
    	SimpleMath math = new SimpleMath();
    	Double firstNumber = 6.2D;
    	Double secondNumber = 2D;
    	Double actual = math.mean(firstNumber, secondNumber);
    	double expected = 8.2D;
    	
    	assertEquals(expected, actual, () ->  (firstNumber + secondNumber) / 2 +  "did not produce expected result " + expected);
    	assertNotEquals(9.2,actual);
    	assertNotNull(actual);
    	
    }
    @Test
    @DisplayName("Test 6.2 + 2 = 8.2")
    void testeSquareRoot() {
    	SimpleMath math = new SimpleMath();
    	Double firstNumber = 6.2D;
    	Double secondNumber = 2D;
    	Double actual = math.squareRoot(firstNumber);
    	double expected = 8.2D;
    	
    	assertEquals(expected, actual, () ->  (Double) Math.sqrt(firstNumber) +  "did not produce expected result " + expected);
    	assertNotEquals(9.2,actual);
    	assertNotNull(actual);
    	
    }

}
